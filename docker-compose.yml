services:
  db:
    image: postgres:latest
    container_name: db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=musicdb
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    volumes:
      - ./db_data:/var/lib/postgresql/data
    networks:
      - monitoring

  app:
    build: ./app
    container_name: app
    networks:
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=PathPrefix(`/musicservice`)"
      - "traefik.http.middlewares.app-strip-prefix.stripprefix.prefixes=/musicservice"
      - "traefik.http.services.app.loadbalancer.server.port=5000"
    volumes:
      - ./app:/app
    environment:
      - FLASK_APP=run.py  # Исправлено с app.py на run.py, так как вы используете run.py
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      db:
        condition: service_healthy

  postgresexporter:
    image: prometheuscommunity/postgres-exporter:latest
    environment:
      DATA_SOURCE_NAME: ${DATABASE_URL}
    ports:
      - "9187:9187"
    networks:
      - monitoring
    volumes:
      - ./pg_exporter/queries.yml:/etc/queries.yml
    command:
      - '--web.listen-address=:9187'
      - '--web.telemetry-path=/metrics'
      - '--collector.database_wraparound'
      - '--collector.long_running_transactions'
      - '--collector.postmaster'
      - '--collector.process_idle'
      - '--collector.stat_activity_autovacuum'
      - '--collector.stat_statements'
      - '--collector.stat_wal_receiver'
      - '--collector.statio_user_indexes'
      - '--extend.query-path=/etc/queries.yml'
    depends_on:
      - db

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=PathPrefix(`/pgadmin`)"
      - "traefik.http.middlewares.pgadmin-strip-prefix.stripprefix.prefixes=/pgadmin"
      - "traefik.http.routers.pgadmin.middlewares=pgadmin-strip-prefix"
      - "traefik.http.services.pgadmin.loadbalancer.server.port=8081"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_LISTEN_PORT=8081
    volumes:
      - ./pgadmin:/var/lib/pgadmin
    ports:
      - "8081:8081"  # Можно оставить для прямого доступа, если нужно
    networks:
      - monitoring
    depends_on:
      - db

  prometheus:
    image: prom/prometheus:latest
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=PathPrefix(`/prometheus`)"
      - "traefik.http.middlewares.prometheus-strip-prefix.stripprefix.prefixes=/prometheus"
      - "traefik.http.routers.prometheus.middlewares=prometheus-strip-prefix"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prom-data:/prometheus
      - prom-configs:/etc/prometheus
    ports:
      - "9090:9090"  # Можно оставить для прямого доступа
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"  # Можно оставить для прямого доступа
    volumes:
      - ./grafana/grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/datasources/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=PathPrefix(`/grafana`)"
      - "traefik.http.middlewares.grafana-strip-prefix.stripprefix.prefixes=/grafana"
      - "traefik.http.routers.grafana.middlewares=grafana-strip-prefix"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_DASHBOARDS_JSON_ENABLED=true
      - GF_DASHBOARDS_JSON_PATH=/etc/grafana/dashboards
      - GF_SERVER_ROOT_URL=http://lotolis/grafana/
    depends_on:
      - prometheus
    networks:
      - monitoring

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cadvisor.rule=PathPrefix(`/cadvisor`)"
      - "traefik.http.middlewares.cadvisor-strip-prefix.stripprefix.prefixes=/cadvisor"
      - "traefik.http.routers.cadvisor.middlewares=cadvisor-strip-prefix"
      - "traefik.http.services.cadvisor.loadbalancer.server.port=8080"
    ports:
      - "8080:8080"  # Можно оставить для прямого доступа
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart:
      always
    networks:
      - monitoring

  node_exporter:
    image: prom/node-exporter:latest
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.node_exporter.rule=PathPrefix(`/node_exporter`)"
      - "traefik.http.middlewares.node_exporter-strip-prefix.stripprefix.prefixes=/node_exporter"
      - "traefik.http.routers.node_exporter.middlewares=node_exporter-strip-prefix"
      - "traefik.http.services.node_exporter.loadbalancer.server.port=9100"
    ports:
      - "9100:9100"  # Можно оставить для прямого доступа
    networks:
      - monitoring
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude'
      - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'

  logstash:
    image: logstash:8.16.2
    container_name: logstash
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5044:5044"
      - "9600:9600"
    depends_on:
      - elasticsearch
    networks:
      - monitoring
    environment:
      - LOGSTASH_OUTPUT_ELASTICSEARCH_URL=http://elasticsearch:9200

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_LOCAL_VERSION}
    container_name: ${ES_LOCAL_CONTAINER_NAME}
    volumes:
      - ./es-data:/usr/share/elasticsearch/data
    networks:
      - monitoring
    ports:
      - "9200:9200"  # Можно оставить для прямого доступа
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ES_LOCAL_PASSWORD}
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.license.self_generated.type=trial
      - xpack.ml.use_auto_machine_memory_percent=true
      - ES_JAVA_OPTS=-Xms${ES_LOCAL_HEAP_INIT} -Xmx${ES_LOCAL_HEAP_MAX}
      - cluster.routing.allocation.disk.watermark.low=${ES_LOCAL_DISK_SPACE_REQUIRED}
      - cluster.routing.allocation.disk.watermark.high=${ES_LOCAL_DISK_SPACE_REQUIRED}
      - cluster.routing.allocation.disk.watermark.flood_stage=${ES_LOCAL_DISK_SPACE_REQUIRED}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.elasticsearch.rule=PathPrefix(`/elasticsearch`)"
      - "traefik.http.middlewares.elasticsearch-strip-prefix.stripprefix.prefixes=/elasticsearch"
      - "traefik.http.routers.elasticsearch.middlewares=elasticsearch-strip-prefix"
      - "traefik.http.services.elasticsearch.loadbalancer.server.port=9200"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --output /dev/null --silent --head --fail -u elastic:${ES_LOCAL_PASSWORD} http://elasticsearch:9200",
        ]
      interval: 5s
      timeout: 5s
      retries: 10

  kibana:
    image: docker.elastic.co/kibana/kibana:${ES_LOCAL_VERSION}
    container_name: ${KIBANA_LOCAL_CONTAINER_NAME}
    volumes:
      - ./kibana:/usr/share/kibana/data
    ports:
      - "5601:5601"  # Можно оставить для прямого доступа
    networks:
      - monitoring
    environment:
      - SERVER_NAME=kibana
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_LOCAL_PASSWORD}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${KIBANA_ENCRYPTION_KEY}
      - ELASTICSEARCH_PUBLICBASEURL=http://localhost:${ES_LOCAL_PORT}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=PathPrefix(`/kibana`)"
      - "traefik.http.middlewares.kibana-strip-prefix.stripprefix.prefixes=/kibana"
      - "traefik.http.routers.kibana.middlewares=kibana-strip-prefix"
      - "traefik.http.services.kibana.loadbalancer.server.port=5601"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://kibana:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 20

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.16.2
    container_name: filebeat
    command: --strict.perms=false -e
    user: root
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ./app/app/logs:/var/log/app_logs
    networks:
      - monitoring
    depends_on:
      - logstash
    environment:
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5044

  traefik:
    image: traefik:v2.10
    container_name: traefik
    ports:
      - "80:80"  # HTTP
      - "443:443"  # HTTPS (если нужно)
      - "8085:8080"  # Панель управления Traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--log.level=INFO"
      - "--configFile=/etc/traefik/traefik.yml"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
    networks:
      - monitoring
    depends_on:
      - app


networks:
  monitoring:
    driver: bridge

volumes:
  grafana_data:
  prom-data:
  prom-configs:
  es-data:
  kibana:
  logstash:
  filebeat: